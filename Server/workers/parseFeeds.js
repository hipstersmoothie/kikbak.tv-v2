// Goes through all of the blogs
var http = require('http'),
	db = require("./../helpers/db"),
	_ = require('lodash'),
	parser = require('parse-rss'),
	request = require('request-enhanced'),
	requestOrig = require('request'),
	cheerio = require('cheerio'),
	getYouTubeID = require('get-youtube-id'),
	youtubeThumbnail = require('youtube-thumbnail'),
	YouTube = require('youtube-node'),
	getTags = require('./../helpers/getTags');

var youTube = new YouTube();
var second=1000, minute=second*60, hour=minute*60, day=hour*24, week=day*7, OLDVIDEOMAXDAYS = 50;
var youtubeKey = 'AIzaSyBbd9SAd34t1c1Z12Z0qLhFDfG3UKksWzg';
youTube.setKey(youtubeKey);

var response = {
  "status": "OK",
  "usage": "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
  "url": "http://www.complex.com/music/2015/11/big-sean-lil-wayne-eminem-finding-paradise-live-in-detroit-concert",
  "totalTransactions": "2",
  "language": "english",
  "text": "In September, Big Sean announced a major concert called “Finding Paradise Live in Detroit” where portions of the proceeds will benefit the Sean Anderson Foundation, which assists in the education, health, safety, and well-being of Detroit school aged youth, as well as disadvantaged youth in other areas across the nation. Earlier tonight, the performance was held at the Joe Louis Arena and it was jam-packed with special guests from Jhené Aiko, Lil Wayne, Eminem and many more. The G.O.O.D. Music rapper performed some of his solo songs like \"One Man Can Change The World\" and \"My Last.\" Check out some videos and photos below.\n  — Nigel Int'l D. (@Nigel_D) November 7, 2015\n",
  "keywords": [
    {
      "relevance": "0.996017",
      "sentiment": {
        "score": "0.355776",
        "type": "positive"
      },
      "text": "Sean Anderson Foundation"
    },
    {
      "relevance": "0.928818",
      "sentiment": {
        "score": "0.227612",
        "type": "positive"
      },
      "text": "Finding Paradise Live"
    },
    {
      "relevance": "0.893651",
      "sentiment": {
        "type": "neutral"
      },
      "text": "Nigel Int'l D."
    },
    {
      "relevance": "0.850932",
      "sentiment": {
        "type": "neutral"
      },
      "text": "G.O.O.D. Music rapper"
    },
    {
      "relevance": "0.843185",
      "sentiment": {
        "type": "neutral"
      },
      "text": "Joe Louis Arena"
    },
    {
      "relevance": "0.684987",
      "sentiment": {
        "type": "neutral"
      },
      "text": "Big Sean"
    },
    {
      "relevance": "0.645626",
      "sentiment": {
        "type": "neutral"
      },
      "text": "Detroit school"
    },
    {
      "relevance": "0.627593",
      "sentiment": {
        "type": "neutral"
      },
      "text": "Jhené Aiko"
    },
    {
      "relevance": "0.616968",
      "sentiment": {
        "type": "neutral"
      },
      "text": "disadvantaged youth"
    },
    {
      "relevance": "0.595698",
      "sentiment": {
        "type": "neutral"
      },
      "text": "Lil Wayne"
    },
    {
      "relevance": "0.583253",
      "sentiment": {
        "type": "neutral"
      },
      "text": "major concert"
    },
    {
      "relevance": "0.558833",
      "sentiment": {
        "type": "neutral"
      },
      "text": "special guests"
    },
    {
      "relevance": "0.537495",
      "sentiment": {
        "type": "neutral"
      },
      "text": "solo songs"
    },
    {
      "relevance": "0.306226",
      "sentiment": {
        "score": "0.355776",
        "type": "positive"
      },
      "text": "proceeds"
    },
    {
      "relevance": "0.302837",
      "sentiment": {
        "score": "-0.271494",
        "type": "negative"
      },
      "text": "Eminem"
    },
    {
      "relevance": "0.301118",
      "sentiment": {
        "score": "0.355776",
        "type": "positive"
      },
      "text": "portions"
    },
    {
      "relevance": "0.297431",
      "sentiment": {
        "type": "neutral"
      },
      "text": "well-being"
    },
    {
      "relevance": "0.25675",
      "sentiment": {
        "type": "neutral"
      },
      "text": "education"
    },
    {
      "relevance": "0.25665",
      "sentiment": {
        "score": "0.380709",
        "type": "positive"
      },
      "text": "health"
    },
    {
      "relevance": "0.25655",
      "sentiment": {
        "type": "neutral"
      },
      "text": "safety"
    },
    {
      "relevance": "0.255701",
      "sentiment": {
        "type": "neutral"
      },
      "text": "areas"
    },
    {
      "relevance": "0.255552",
      "sentiment": {
        "type": "neutral"
      },
      "text": "nation"
    },
    {
      "relevance": "0.25144",
      "sentiment": {
        "type": "neutral"
      },
      "text": "performance"
    },
    {
      "relevance": "0.24941",
      "sentiment": {
        "score": "0.446993",
        "type": "positive"
      },
      "text": "videos"
    },
    {
      "relevance": "0.249316",
      "sentiment": {
        "score": "0.446993",
        "type": "positive"
      },
      "text": "photos"
    },
    {
      "relevance": "0.248569",
      "sentiment": {
        "type": "neutral"
      },
      "text": "Man"
    }
  ],
   "entities": [
    {
      "type": "Organization",
      "relevance": "0.886313",
      "sentiment": {
        "type": "positive",
        "score": "0.355776"
      },
      "count": "1",
      "text": "Sean Anderson Foundation"
    },
    {
      "type": "Facility",
      "relevance": "0.78896",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "Joe Louis Arena",
      "disambiguated": {
        "subType": [
          "Location",
          "Stadium",
          "Building",
          "Skyscraper",
          "SportsFacility"
        ],
        "name": "Joe Louis Arena",
        "geo": "42.32527777777778 -83.0513888888889",
        "dbpedia": "http://dbpedia.org/resource/Joe_Louis_Arena",
        "freebase": "http://rdf.freebase.com/ns/m.02wrn9",
        "geonames": "http://sws.geonames.org/6348339/",
        "yago": "http://yago-knowledge.org/resource/Joe_Louis_Arena"
      }
    },
    {
      "type": "City",
      "relevance": "0.757514",
      "sentiment": {
        "type": "positive",
        "score": "0.227612"
      },
      "count": "1",
      "text": "Detroit",
      "disambiguated": {
        "name": "Detroit",
        "website": "http://www.detroitmi.gov/",
        "dbpedia": "http://dbpedia.org/resource/Detroit",
        "freebase": "http://rdf.freebase.com/ns/m.02dtg"
      }
    },
    {
      "type": "Movie",
      "relevance": "0.74818",
      "sentiment": {
        "type": "negative",
        "score": "-0.362317"
      },
      "count": "1",
      "text": "My Last"
    },
    {
      "type": "Organization",
      "relevance": "0.715775",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "Detroit school"
    },
    {
      "type": "Person",
      "relevance": "0.702587",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "Jhené Aiko",
      "disambiguated": {
        "name": "Jhené Aiko",
        "dbpedia": "http://dbpedia.org/resource/Jhené_Aiko",
        "freebase": "http://rdf.freebase.com/ns/m.01vd26w"
      }
    },
    {
      "type": "Person",
      "relevance": "0.634736",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "Lil Wayne",
      "disambiguated": {
        "subType": [
          "Composer",
          "MusicalArtist",
          "AwardNominee",
          "AwardWinner",
          "BroadcastArtist",
          "Celebrity",
          "MusicalGroupMember",
          "FilmActor"
        ],
        "name": "Lil Wayne",
        "website": "http://www.lilwayne-online.com",
        "dbpedia": "http://dbpedia.org/resource/Lil_Wayne",
        "freebase": "http://rdf.freebase.com/ns/m.016kjs",
        "yago": "http://yago-knowledge.org/resource/Lil_Wayne",
        "musicBrainz": "http://zitgist.com/music/artist/ac9a487a-d9d2-4f27-bb23-0f4686488345"
      }
    },
    {
      "type": "Person",
      "relevance": "0.554872",
      "sentiment": {
        "type": "negative",
        "score": "-0.271494"
      },
      "count": "1",
      "text": "Eminem",
      "disambiguated": {
        "subType": [
          "MusicalArtist"
        ],
        "name": "Eminem",
        "website": "http://www.eminem.com/",
        "dbpedia": "http://dbpedia.org/resource/Eminem",
        "freebase": "http://rdf.freebase.com/ns/m.01vsgrn",
        "yago": "http://yago-knowledge.org/resource/Eminem",
        "musicBrainz": "http://zitgist.com/music/artist/b95ce3ff-3d05-4e87-9e01-c97b66af13d4"
      }
    }
  ],
  "taxonomy": [
    {
      "label": "/art and entertainment/shows and events/concert",
      "score": "0.54022"
    },
    {
      "label": "/art and entertainment/music/music genres/hip hop",
      "score": "0.533297"
    },
    {
      "label": "/art and entertainment/music",
      "score": "0.503448"
    }
  ]
}



var refreshBlogsFeeds = function() {
	console.log('Finding new videos...');
	db.blogs.find({ tested : true}, function(err, blogs) {
		_.forEach(blogs, parseFeed);
	});
}

var posts = 0;
var parseFeed = function(url) {
	parser(url.url, function(err, postsData) {
		if(err) {
			// console.log('parseFeed', url, err);
		}
		else  {
			_.forEach(postsData, _.bind(getHtml, null, _, url));
		}
	});
}

var getHtml = function(post, blog) {
	request.get({
		url: post.link,
		maxAttempts:3,
		maxConcurrent: 50
	}, function(error, response){
		// First we'll check to make sure no errors occurred when making the request
		if(!error){
			// Next, we'll utilize the cheerio library on the returned html which will essentially give us jQuery functionalit
			var $ = cheerio.load(response);
			handlePost($, blog, post.link);
		} else {
			// console.log("getHtml", blog, post.link, error);
		}
	});
}

var handlePost = function($, blog, link) {
	var iframes = $('iframe');

	_.forEach(iframes, function(iframe) {
		if(iframe.attribs.src && iframe.attribs.src.indexOf('youtu') > -1) {
			addToDb(iframe.attribs.src, blog, $, link);
		}
	});
}

var tagVideo = function(vidId, html, $) {
	youTube.getById(vidId, function(error, result) {
		if(!error) {
			var tags;
			if(result && result['items'] && result['items'][0] && result['items'][0]['snippet'])
				tags = getTags.getTag(html, $, result['items'][0]['snippet']['description'], result['items'][0]['snippet']['title'], result['items'][0]['snippet']['channelTitle']);
			else
				tags = getTags.getTag(html, $, '', '', '');
			db.videos.update({ videoId : vidId }, {$addToSet: {
				tags : {$each:tags}
			}});
		}
	});
}

var addToDb = function(url, blog, $, link) {
	var vidId = getYouTubeID(url);
	db.videos.find({ videoId : vidId }, function(err, video) {  
		if (err) {
			// console.log('addToDb', err);
		} else {
			if (video.length > 0)
				updateVid(video, blog, vidId, $, link);
			else
				newVid(vidId, url, blog, $, link);
		}
	});
}

var updateVid = function(vidList, blog, vidId, $, link) {
	video = vidList[0];
	var foundUrls = _.map(video.foundOn, function(url) { return url.url });
	if (!_.includes(foundUrls,  blog.url)) {
		console.log('updating', video.title, video.foundOn, blog);
		var blogs = blog.tags ? blog.tags : [];
		var tags = _.union(getTags.getTag($('p'), $, "", "", ""), blogs);
		db.videos.update({ videoId : vidId }, {
			$addToSet: {
				foundOn : blog
			}
		});
		db.videos.update({ videoId : vidId }, {$addToSet: {
			tags : {$each:tags}
		}});
		db.videos.update({ videoId : vidId }, {$addToSet: {
			origPosts : link
		}});
	}
	posts++;
}

var newVid = function(vidId, url, blog, $, link) {
	//checkstills
	request.get({
		url: 'https://www.googleapis.com/youtube/v3/videos?part=statistics%2Csnippet&id=' + vidId  + '&key=' + youtubeKey,
		maxAttempts:3,
		maxConcurrent: 50
	}, function(error, result) {
		result = JSON.parse(result);
		if(result && result['items'] && result['items'].length > 0 
			&& /official audio|\(audio\)|\[audio\]|audio only/i.exec(result['items'][0]['snippet']['title']) == null) {
			if ((Date.now() - Date.parse(result['items'][0]['snippet']['publishedAt']))/day > OLDVIDEOMAXDAYS)
				return;

			analyzePost(link, function(tagFound) {
				compareStills({ videoId: vidId }, function(isSame) {
					var bigThumb;
					var smallThumb;
					if(result['items'][0]['snippet']['thumbnails'].maxres) {
						bigThumb = result['items'][0]['snippet']['thumbnails'].maxres.url;
					} else if (result['items'][0]['snippet']['thumbnails'].standard) {
						bigThumb = result['items'][0]['snippet']['thumbnails'].standard.url;
					} else {
						bigThumb = result['items'][0]['snippet']['thumbnails'].high.url;
					}

					if(result['items'][0]['snippet']['thumbnails'].standard) {
						smallThumb = result['items'][0]['snippet']['thumbnails'].standard.url;
					} else {
						smallThumb = result['items'][0]['snippet']['thumbnails'].high.url;
					}

					var blogs = blog.tags ? blog.tags : [];
					var tags =  _.union(getTags.getTag($('p'), $, result['items'][0]['snippet']['description'], result['items'][0]['snippet']['title'], result['items'][0]['snippet']['channelTitle']), blogs)
					if(isSame)
						tags.push('NotAVid')
					if(tagFound)
						tags.push(tagFound)
					
					console.log('adding', result['items'][0]['snippet']['title'], vidId); 
					db.videos.update({ videoId : vidId }, {
						$setOnInsert: {
							youTubePostDate : result['items'][0]['snippet']['publishedAt'],
							videoId : vidId,
							foundOn : [blog],
							origPosts : [link],
							dateFound : _.now(),
							thumbnail : youtubeThumbnail(url),
							thumbHQ: bigThumb,
							thumbSmall: smallThumb,
							title : result['items'][0]['snippet']['title'],
							description : result['items'][0]['snippet']['description'],
							publishedBy : result['items'][0]['snippet']['channelTitle'],
							oldStats : result['items'][0]['statistics'],
							avgViewPerHalfHour : 0,
							avgLikePerHalfHour : 0,
							avgDislikePerHalfHour : 0,
							avgFavoritePerHalfHour : 0,
							avgCommentPerHalfHour : 0,
							taxonomy: taxonomy,
							keywords: keywords
						},
						$addToSet: {
							tags : {
								$each: tags
							}
						}
					}, { upsert : true }, function(err, res) {
						console.log(err, res)
					});
					posts++;
				}); 
			})
			
		} else if (error) {
			// console.log(error);
		}			
	});
}

var lastPosts;
// setInterval(function() {
// 	if (lastPosts == posts) {
// 		console.log('searched', posts, 'posts');
// 		process.exit();
// 	} else {
// 		lastPosts = posts
// 	}
// }, 120000)

var async = require('async');
var fs = require('fs');
var gm = require('gm');

var download = function(uri, filename, callback){
	requestOrig(uri).pipe(fs.createWriteStream(filename)).on('close', callback).on('error', function  (error) {
		console.log(error)
	});
};

function compareStills(video, cback) {
	var still1 = 'http://img.youtube.com/vi/' + video.videoId + '/1.jpg';
	var still2 = 'http://img.youtube.com/vi/' + video.videoId + '/2.jpg';
	var still3 = 'http://img.youtube.com/vi/' + video.videoId + '/3.jpg';
	var stills = [still1, still2, still3];
	var images = [];

	async.each(stills, function(still, callback, index) {
		download(still, video.videoId + stills.indexOf(still) + '.jpg', function(){
		  images.push('./' + video.videoId + stills.indexOf(still) + '.jpg');

		  callback();
		});
	}, function(err){
	    if( err ) {
	      console.log('A file failed to process');
	      _.forEach(images, fs.unlink)
	      cback(false)
	    } else {		
	    	gm.compare(images[0], './workers/noPicture.jpg', 0.02, function (err, isEqual, equality, raw, path1, path2) {
			  if (err) return cback(err);
			  if(isEqual) {
			  	_.forEach(images, fs.unlink)
			  	cback(false)
			  } else {
			  	gm.compare(images[0], images[1], 0.002, function (err, isEqual, equality, raw, path1, path2) {
				  if (err) return handle(err);				 
				  if(isEqual) {
				  	gm.compare(images[1], images[2], 0.002, function (err, isEqual, equality, raw, path1, path2) {
					  if (err) return handle(err);
					  _.forEach(images, fs.unlink)
					  cback(isEqual)
					  if(isEqual)
					  	console.log('still video', 'https://www.youtube.com/watch?v=' + video.videoId)
					});
				  } else {
				  	_.forEach(images, fs.unlink)
				  	cback(isEqual)
				  }
				});
			  }
			});
		}
	});
}

function findStills () {
	db.videos.find({ }, function(err, videos) {
		var i = 0;
		setInterval(function() {
			(function(video) {
				compareStills(video, function(isSame) {
					if(isSame === true)
						db.videos.update({ videoId : video.videoId }, {$addToSet: {
							tags : "NotAVid"
						}});
				});
			})(videos[i]);
			i++;
		}, 200)
	});
}

var AlchemyAPI = require('./../javascripts/alchemyapi');
var alchemyapi = new AlchemyAPI();

function analyzePost(url, callback) {
	alchemyapi.combined('url', url, {
		extract: ['keyword', 'taxonomy', 'entity']
	}, function(data) {
		var keywords = data.keywords ? data.keywords : [];
		var taxonomy = data.taxonomy ? data.taxonomy : [];	
		var entities = data.entities ? data.entities : [];

		db.buckets.find({}, function(err, buckets) {
			var bestBucket, bestOverall = 0;
			_.forEach(buckets, function(bucket) {
				var keywordConfidence = compareKeywords(bucket.approvedKeywords, bucket.magicWords, keywords),
					taxonomyConfidence = compareTaxonomy(bucket.solidTaxonomy, taxonomy),
					entityConfidence = compareEntity(bucket.solidEntities, entities),
					overall = keywordConfidence + taxonomyConfidence + entityConfidence;
				console.log(overall);
				if(overall >= 1.5 && overall > bestOverall) {
					bestBucket = bucket;
					bestOverall = overall
				}
			});
			if(bestBucket)
				callback(bestBucket.tag);
			else
				callback();
		});
	});
}

function workingTagging(data, callback) {
	var keywords = data.keywords ? data.keywords : [];
	var taxonomy = data.taxonomy ? data.taxonomy : [];	
	var entities = data.entities ? data.entities : [];

	db.buckets.find({}, function(err, buckets) {
		var bestBucket, bestOverall = 0;
		_.forEach(buckets, function(bucket) {
			var keywordConfidence = compareKeywords(bucket.approvedKeywords, bucket.magicWords, keywords),
				taxonomyConfidence = compareTaxonomy(bucket.solidTaxonomy, taxonomy),
				entityConfidence = compareEntity(bucket.solidEntities, entities),
				overall = keywordConfidence + taxonomyConfidence + entityConfidence;
			console.log(overall);
			if(overall >= 1.5 && overall > bestOverall) {
				bestBucket = bucket;
				bestOverall = overall
			}
		});
		if(bestBucket)
			callback(bestBucket.tag);
		else
			callback();
	});
}

workingTagging(response, function(result) {
	console.log(result)
});

function compareKeywords(base, magicWords, found) {
	var confidence = 0;

	_.forEach(found, function(keyword) {
		if(_.includes(base, keyword.text)) 
			confidence += parseFloat(keyword.relevance)
		
		var text = keyword.text;
		_.forEach(magicWords, function(magicWord) {
			if(text.toLowerCase().indexOf(magicWord) > -1)
				confidence += parseFloat(keyword.relevance)
		});
	});

	return confidence;
}

function compareTaxonomy(base, found) {
	var confidence = 0;

	_.forEach(found, function(taxonomy) {
		if(_.includes(base, taxonomy.label))
			confidence += parseFloat(taxonomy.score)
	});

	return confidence;
}

function compareEntity(base, found) {
	var confidence = 0;

	_.forEach(found, function(entity) {
		if(_.includes(base, entity.text))
			confidence += parseFloat(entity.relevance)
	});

	return confidence;
}

function gatherInfo(genre) {
	db.buckets.find({tag: genre}, function(err, frame) {
		if(err)
			return console.log(err)

		var searchedPosts = frame[0].searchedPosts;
		db.videos.find({tags:genre}, function(err, videos) {
			if(!err) {
				var i = 0;
				var inter = setInterval(function() {
					if(i === videos.length)
						return clearInterval(inter);
					var video = videos[i++];
					_.forEach(video.origPosts, function(url) { // go through post found 
						if(!_.includes(searchedPosts, url)) { // exclude already visited posts
							console.log(video.title, i)
							searchedPosts = _.union(searchedPosts, url);
							analyzePost(url, function(data) {
								console.log(data)
								var keywords = data.keywords ? _.pluck(data.keywords, 'text') : [];
								var taxonomy = data.taxonomy ? _.pluck(data.taxonomy, 'label') : [];	
								var entities = data.entities ? _.pluck(data.entities, 'text') : [];	
				
								db.buckets.update({tag: genre}, {
									$push: {
										'taxonomy' : { $each : taxonomy },
										'keywords' : { $each : keywords },
										'entities' : { $each : entities }
									},
									$addToSet: {
										'searchedPosts' : url
									}
								})
							});
						} 
					});
				}, 500);
			} else {
				console.log(err)
			}
		});
	});
}

// countAlchemy("Live");
// refreshBlogsFeeds();

function countAlchemy(genre) {
	db.buckets.find({tag: genre}, function(err, frame) {
		console.log("========== " + genre + " ========");
		setPrint(frame[0].taxonomy, "toxonomy");
		console.log("==============================");
		setPrint(frame[0].keywords, "keywords");
		console.log("==============================");
		var subtractedKeywords = _.difference(frame[0].entities, frame[0].keywords);
		setPrint(subtractedKeywords, "Keywords without entities");
		// setPrint(frame[0].entities, "entities");
	});
}

function bySortedValue(obj, callback, context) {
    var tuples = [];

    for (var key in obj) tuples.push([key, obj[key]]);

    tuples.sort(function(a, b) { return a[1] < b[1] ? 1 : a[1] > b[1] ? -1 : 0 });

    var length = 0;
    while (length++ != 10) callback.call(context, tuples[length][0], tuples[length][1]);
}

function setPrint(sets, name) {
	var dictionary = {};
	var nodupes = _.uniq(sets, false);
	console.log("Total " + name + ": " + sets.length);
	console.log("Total unique " + name + ": " + nodupes.length);	
	_.forEach(sets, function(index) {
		if(dictionary[index] === undefined) dictionary[index] = 0;
		dictionary[index]++;
	});
	console.log("Top 10 most common " + name);
	bySortedValue(dictionary, function(key, value) {
		console.log(key, value);
	});
}	



